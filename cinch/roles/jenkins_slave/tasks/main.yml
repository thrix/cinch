- name: install rpm packages
  yum:
    name: "{{ jslave_rpm_deps | join(',') }}"
    state: present

- name: install pip packages
  pip:
    requirements: /tmp/requirements-common.txt
    state: present

- name: install additional pip packages
  pip:
    name: "{{ item }}"
    state: present
  with_items:
    - ansible==1.8.4
    - nose

- name: add host to hosts file
  lineinfile:
    line: "{{ ansible_ssh_host }} {{ inventory_hostname }}.localdomain"
    dest: /etc/hosts
  when: "'{{ ansible_connection }}' != 'docker'"

- name: create jenkins user
  user:
    name: jenkins
    password: "{{ jenkins_user_password }}"

- name: give jenkins user sudo access
  lineinfile:
    dest: /etc/sudoers
    line: "{{ jenkins_user }}  ALL=(ALL)   NOPASSWD: ALL"

- name: ensure jswarm destination folder exists
  file:
    path: "{{ jswarm_local_directory }}"
    owner: "{{ jenkins_user }}"
    mode: 0755
    state: directory

- name: fetch swarm download
  get_url:
    dest: "{{ jswarm_local_directory }}/{{ jswarm_filename }}"
    url: "{{ jswarm_download }}"
    owner: "{{ jenkins_user }}"


# Inside of a Docker container, we want to be able to pull values from the container's running
# environment. In order to do that, we need to drop values into the configurable fields that
# match the syntax dockerize uses. Unfortunately, that syntax is very similar to Jinja2 syntax,
# and Ansible does not stop evaluation after only one iteration. Putting Jinja2 raw blocks into
# the string values here allow only the inner string (e.g. '{{ .Env.JENKINS_MASTER_URL }}') to
# pass through to the output and prevents Ansible from trying to do template substitution on the
# string value itself.
- name: set variable for docker container
  set_fact:
    jenkins_master_url: "{{ '{% raw %}{{ .Env.JENKINS_MASTER_URL }}{% endraw %}' }}"
    jslave_name: "{{ '{% raw %}{{ .Env.JSLAVE_NAME }}{% endraw %}' }}"
    jslave_label: "{{ '{% raw %}{{ .Env.JSLAVE_LABEL }}{% endraw %}' }}"
    jswarm_extra_args: "{{ '{% raw %}{{ default .Env.JSWARM_EXTRA_ARGS \"\" }}{% endraw %}' }}"
  when: "'{{ ansible_connection }}' == 'docker'"

- name: upload swarm config file
  template:
    src: sysconfig_jenkins_swarm
    dest: /etc/sysconfig/jenkins_swarm
    owner: root
    mode: 0644
  notify: restart swarm

- name: inject additional variables to swarm's environment
  lineinfile:
    dest: /etc/sysconfig/jenkins_swarm
    line: "{{ item }}"
    state: present
  with_items: "{{ jswarm_environment }}"
  notify: restart swarm

- name: upload swarm systemd file
  template:
    src: swarm.service
    dest: /etc/systemd/system/swarm.service
    owner: root
    mode: 0644
  notify: restart swarm
  when: "'{{ ansible_service_mgr }}' == 'systemd'"
  register: systemd_file

- name: reload systemd files
  systemd:
    daemon_reload: true
    name: swarm
  when: "{{ systemd_file|changed }}"

- name: upload swarm upstart file
  template:
    src: swarm.upstart.conf
    dest: /etc/init/swarm.conf
    owner: root
    mode: 0644
  notify: restart swarm
  when: "'{{ ansible_service_mgr }}' == 'upstart'"

- name: flush handlers to avoid start/restart on initial launch
  meta: flush_handlers

- name: start swarm
  service:
    name: swarm
    state: started
    enabled: true
  when: "'{{ ansible_connection }}' != 'docker'"
